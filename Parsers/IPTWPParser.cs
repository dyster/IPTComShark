using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using IPTComShark.Classes;
using IPTComShark.XmlFiles;
using sonesson_tools.BitStreamParser;

namespace IPTComShark.Parsers
{
    class IPTWPParser : IParser
    {
        private const string Iptfile = @"ECN1_ipt_config.xml";
        private DataStore _dataStore;
        private IPTConfigReader IptConfigReader;

        public IPTWPParser()
        {
            IptConfigReader = new IPTConfigReader(Iptfile);

            _dataStore = new DataStore();
            _dataStore.Add(IptConfigReader.GetDataSetCollection());
            _dataStore.RebuildIndex();
        }

        public Parse Extract(byte[] data)
        {
            var comid = IPTWPPacket.GetComid(data);
            var dataSetDefinition = _dataStore.GetByComid(comid);
            if (dataSetDefinition != null)
            {
                var iptPayload = IPTWPPacket.GetIPTPayload(data);
                var parsedDataSet = dataSetDefinition.Parse(iptPayload);
                var parse = new Parse
                {
                    BackLinkIdentifier = comid.ToString(), AutoGenerateDeltaFields = true, Name = parsedDataSet.Name
                };
                parse.ParsedData = new List<ParsedDataSet>(){parsedDataSet};
                return parse;
            }
            else
            {
                var parse = new Parse();
                parse.Name = "Unknown";
                parse.NoParserInstalled = true;
                return parse;
            }

            
        }

        public ProtocolType ProtocolType => ProtocolType.IPTWP;
    }
}
